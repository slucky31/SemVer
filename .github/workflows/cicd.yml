name: .NET Core

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:      
      -
        name : Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0      
      -
        name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x                    
      -
        name: Api Install dependencies
        run: dotnet restore "./SemVer/SemVer.csproj"                            
      -
        name: Api Build
        run: dotnet build "./SemVer/SemVer.csproj" --configuration Release --no-restore      
         
  publish:
    needs: build
    if: ${{ (github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Install Versionize
        run: dotnet tool install --global Versionize

      - name: Versioning
        id: versionize
        run: versionize --changelog-all --exit-insignificant-commits
        continue-on-error: true
      
      - name: No release required
        if: steps.versionize.outcome != 'success'
        run: echo "Skipping Release. No release required."
      
      - name: Setup git
        if: steps.versionize.outcome == 'success'
        run: |
          git config --local user.email "nicolas.dufaut@gmail.com"
          git config --local user.name "slucky31"
          
      - name: Push changes to GitHub
        if: steps.versionize.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true
      
      - name: "Create release"
        if: steps.versionize.outcome == 'success'
        uses: "actions/github-script@v5"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const tags_url = context.payload.repository.tags_url + "?per_page=1"
              const result = await github.request(tags_url)
              const current_tag = result.data[0].name
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: current_tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: current_tag,
              });
            } catch (error) {
              core.setFailed(error.message);
            }